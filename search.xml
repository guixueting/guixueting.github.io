<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Blog图床选择</title>
      <link href="/2023/06/26/%E5%9B%BE%E5%BA%8A%E9%80%89%E6%8B%A9/"/>
      <url>/2023/06/26/%E5%9B%BE%E5%BA%8A%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="一、为什么要选择图床"><a href="#一、为什么要选择图床" class="headerlink" title="一、为什么要选择图床"></a>一、为什么要选择图床</h1><ol><li>当我们在本地写博客做笔记（用Typora或MarkText）时，我们一般会把图片存在当前文章的路径下</li><li>当我们在CSDN、掘金或知乎等平台上写博客时，我们的图片会被存储到这些网站对应的服务器中</li><li>而当我们的博客发布在Hexo上时，图片的加载路径有以下两种方式：<ol><li>参照我们本地写博客的方式，将图片存储到Hexo下的public资源文件夹下</li><li>参照在技术论坛写博客的方式，将图片存储到服务器上</li></ol></li></ol><p>如果将图片资源都存储到Hexo的文件中，会变得很臃肿，所以不采用该方案。</p><p>我们这里所要说的就是将图片存储到服务器上，即图床这种方式。</p><h1 id="二、方案-阿里云对象存储-Picgo"><a href="#二、方案-阿里云对象存储-Picgo" class="headerlink" title="二、方案: 阿里云对象存储 + Picgo"></a>二、方案: 阿里云对象存储 + Picgo</h1><ol><li>登录阿里云网站，进入工作台页面，搜索对象存储，进入该页面，然后点击bucket列表</li></ol><p><a href="https://oss.console.aliyun.com/overview">阿里云</a></p><img src="https://gxt-buckets.oss-cn-shanghai.aliyuncs.com/blog/20230607150932.png" style="zoom: 25%;" /><ol start="2"><li>进入页面，点击创建bucket.</li></ol><ul><li>Bucket名称和地域必填。地域选择一个距离自己近一些的地方。</li><li>读写权限选择为公共读，其余均默认</li></ul><img src="https://gxt-buckets.oss-cn-shanghai.aliyuncs.com/blog/20230607151339.png" style="zoom: 50%;" /><ol start="3"><li><p>点击网页右上角的头像，再点击AccessKey管理，进入该页面</p><img src="https://gxt-buckets.oss-cn-shanghai.aliyuncs.com/blog/image-20221015202601913.png" alt="image-20221015202601913" style="zoom:50%;" /></li><li><p>点击创建AccessKey，将创建号的key复制保存下来，之后在Picgo上需要用到</p></li><li><p>打开Picgo，点击图床设置，选择阿里云OSS，填写如下信息。</p><img src="https://lty-image-bed.oss-cn-shenzhen.aliyuncs.com/blog/image-20221015202826913.png" alt="image-20221015202826913" style="zoom: 50%;" /><ol start="6"><li><p>Picgo下载</p><p><a href="https://github.com/Molunerfinn/PicGo/releases">Picgo下载</a></p></li></ol></li></ol><h1 id="三、结合Typora使用"><a href="#三、结合Typora使用" class="headerlink" title="三、结合Typora使用"></a>三、结合Typora使用</h1><p>用Typora写笔记，只需要先截图，再粘贴到Markdown文档，即可直接跳过上传操作，Typora帮我们自动完成。</p><p>操作为：打开Typora的设置，点击图像，按照我给的图片进行设置</p><img src="https://lty-image-bed.oss-cn-shenzhen.aliyuncs.com/blog/image-20221015203547504.png" alt="image-20221015203547504" style="zoom:50%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IntersectionObserver</title>
      <link href="/2023/06/26/IntersectionObserver/"/>
      <url>/2023/06/26/IntersectionObserver/</url>
      
        <content type="html"><![CDATA[<h1 id="一、IntersectionObserver介绍"><a href="#一、IntersectionObserver介绍" class="headerlink" title="一、IntersectionObserver介绍"></a>一、IntersectionObserver介绍</h1><h2 id="1-1-起源"><a href="#1-1-起源" class="headerlink" title="1.1 起源"></a>1.1 起源</h2><p>在现代网页开发中，动态加载和按需展示内容已成为提升用户体验和网页性能的重要手段。传统的方法通常依赖于滚动事件或定时器来监测元素与视窗的交叉状态，但这些方法效率低下且容易导致性能问题。为了解决这个问题，<code>W3C</code> 于 2016 年引入了 <code>IntersectionObserver API</code>。</p><h2 id="1-2-IntersectionObserver-是什么？"><a href="#1-2-IntersectionObserver-是什么？" class="headerlink" title="1.2 IntersectionObserver 是什么？"></a>1.2 IntersectionObserver 是什么？</h2><p><code>IntersectionObserver</code>是一种浏览器提供的 <code>JavaScript API</code>，用于监测元素与视窗的交叉状态。它可以告诉开发者一个元素是否进入或离开视窗，以及两者的交叉区域的大小和位置。<br> 它提供了一种高效的方法来观察元素是否进入或离开视窗，而无需依赖滚动事件或定时器。它可以通过回调函数及设定的阈值来实时地通知开发者目标元素与视窗的交叉状态，并根据需要采取相应的操作。</p><h2 id="1-3-IntersectionObserver-的特性"><a href="#1-3-IntersectionObserver-的特性" class="headerlink" title="1.3 IntersectionObserver 的特性"></a>1.3 IntersectionObserver 的特性</h2><ul><li><strong>异步执行</strong>：<code>IntersectionObserver</code> 是异步执行的，它使用浏览器的内部优化机制，不会阻塞主线程，从而避免了性能问题。</li><li><strong>节省资源</strong>：相比于传统的滚动事件或定时器，<code>IntersectionObserver</code> 可以精确地观察元素与视窗的交叉状态，避免了不必要的计算和回调触发，从而节省了资源的消耗。</li><li><strong>多目标观察</strong>：<code>IntersectionObserver</code> 可以同时观察多个目标元素，通过回调函数逐个通知开发者它们的交叉状态，方便进行批量操作。</li><li><strong>自定义阈值</strong>：开发者可以设定一个或多个阈值，用来定义元素与视窗的交叉比例。当交叉比例超过或低于阈值时，会触发相应的回调函数。</li></ul><p>通过使用 <code>IntersectionObserver</code>，开发者可以实现一些常见的功能，如图片懒加载、无限滚动加载、广告展示控制等，以提升网页的性能和用户体验。</p><h2 id="1-4-IntersectionObserver的作用"><a href="#1-4-IntersectionObserver的作用" class="headerlink" title="1.4  IntersectionObserver的作用"></a>1.4  IntersectionObserver的作用</h2><ul><li>图片懒加载</li><li>无限滚动加载</li><li>广告展示控制</li><li>有效曝光埋点</li><li>用户兴趣埋点</li><li>可视区域内外动画&#x2F;视频暂停（腾讯视频列表效果）</li><li>视差效果与动画</li><li>标题和导航联动</li><li>虚拟列表优化</li><li>消息已读状态标记（各聊天软件）</li></ul><h1 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h1><p><code>IntersectionObserver</code> 的工作原理涉及到观察目标元素、目标元素与视窗的交叉区域、回调函数和阈值等方面。<code>MDN</code> 官方介绍请<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">移步</a></p><h2 id="2-1-观察目标元素"><a href="#2-1-观察目标元素" class="headerlink" title="2.1 观察目标元素"></a>2.1 观察目标元素</h2><p><code>IntersectionObserver</code> 首先需要指定要观察的目标元素。这可以通过创建一个 <code>IntersectionObserver</code> 实例，并传入一个回调函数来实现。回调函数会在目标元素的交叉状态发生变化时被调用。</p><h2 id="2-2-目标元素与视窗的交叉区域"><a href="#2-2-目标元素与视窗的交叉区域" class="headerlink" title="2.2 目标元素与视窗的交叉区域"></a>2.2 目标元素与视窗的交叉区域</h2><p><code>IntersectionObserver</code> 会根据目标元素与视窗的交叉区域来确定它们的交叉状态。交叉区域可以分为以下几种情况：</p><ul><li><strong>进入视窗</strong>：当目标元素的一部分进入视窗时，被称为进入视窗。</li><li><strong>完全进入视窗</strong>：当目标元素完全进入视窗时，被称为完全进入视窗。</li><li><strong>离开视窗</strong>：当目标元素完全离开视窗时，被称为离开视窗。</li><li><strong>部分离开视窗</strong>：当目标元素的一部分离开视窗时，被称为部分离开视窗。</li></ul><p><code>IntersectionObserver</code> 可以精确地计算目标元素与视窗的交叉区域，并根据交叉区域的变化来确定它们的交叉状态。</p><h2 id="2-3-回调函数和阈值"><a href="#2-3-回调函数和阈值" class="headerlink" title="2.3 回调函数和阈值"></a>2.3 回调函数和阈值</h2><p>当目标元素的交叉状态发生变化时，注册的回调函数将被触发。开发者可以在回调函数中定义相应的操作，如加载或显示元素。</p><p>此外，<code>IntersectionObserver</code> 还支持自定义阈值。阈值是一个介于 <code>0.0</code> 和 <code>1.0</code> 之间的值，用来定义目标元素与视窗的交叉比例。当交叉比例超过或低于设定的阈值时，会触发回调函数。</p><h2 id="2-4-IntersectionObserver-的运行机制"><a href="#2-4-IntersectionObserver-的运行机制" class="headerlink" title="2.4 IntersectionObserver 的运行机制"></a>2.4 IntersectionObserver 的运行机制</h2><p><code>IntersectionObserver</code> 在内部采用了一些高效的运行机制来实现元素交叉状态的观察和回调触发。下面更详细地介绍下 <code>IntersectionObserver</code> 的运行机制。</p><ol><li><strong>惰性计算</strong><br> 为了避免性能问题和不必要的计算，<code>IntersectionObserver</code> 采用了惰性计算的策略。它并不实时地计算目标元素与视窗的交叉状态，而是在特定时机进行计算。<br> 当一个目标元素进入或离开视窗的边界区域时，浏览器会通知 <code>IntersectionObserver</code> 进行交叉状态的计算。这样可以避免对所有元素进行持续的计算，从而节省了资源并提高了性能。</li><li><strong>队列处理</strong><br> 为了保证运行的平滑性，<code>IntersectionObserver</code> 使用了队列处理的机制。当目标元素的交叉状态发生变化时，会将变化的目标元素放入一个队列中。<br> <code>IntersectionObserver</code> 会在下一个动画帧或微任务中处理队列中的元素。这种延迟处理的方式可以避免在一帧内频繁触发大量回调函数，从而提供更流畅的用户体验。</li><li><strong>优化算法</strong><br> 为了提高性能和减少回调触发的次数，<code>IntersectionObserver</code> 使用了一些优化算法。它会将目标元素进行分组，并按照它们在文档中的顺序进行观察。<br> 当观察到交叉状态变化时，<code>IntersectionObserver</code> 会将变化的目标元素放入队列中，并按照它们在文档中的顺序进行处理。这样可以确保回调函数的触发顺序与元素在文档中的顺序一致，避免出现混乱或错误的情况。</li></ol><p>通过采用惰性计算、队列处理和优化算法，<code>IntersectionObserver</code> 实现了高效而平滑的元素交叉状态观察和回调触发，为开发者提供了一种优雅且性能优化的解决方案。</p><h1 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h1><h2 id="3-1-图片懒加载"><a href="#3-1-图片懒加载" class="headerlink" title="3.1 图片懒加载"></a>3.1 图片懒加载</h2><p>图片懒加载是 <code>IntersectionObserver</code> 在网页开发中常见的应用场景之一。传统情况下，网页加载时所有的图片都会同时加载，无论它们是否在视窗中可见。这会导致不必要的网络请求和资源浪费。<br> 通过使用 <code>IntersectionObserver</code>，可以延迟加载图片，只在它们进入视窗时才开始加载。这样可以减少初始页面加载时间，并节省带宽和资源。<br> 实现图片懒加载的步骤如下：</p><ol><li>创建 <code>IntersectionObserver</code> 实例，并指定观察的目标元素。</li><li>在回调函数中，判断目标元素是否进入视窗。</li><li>若目标元素进入视窗，将其真实的图片地址赋给元素的 <code>src</code> 属性，触发图片加载。</li></ol><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> img = entry.<span class="property">target</span>;</span><br><span class="line">      img.<span class="property">src</span> = img.<span class="property">dataset</span>.<span class="property">src</span>; <span class="comment">// 将真实的图片地址赋给 src 属性</span></span><br><span class="line">      observer.<span class="title function_">unobserve</span>(img); <span class="comment">// 停止观察该图片</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lazyImages = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.lazy-image&#x27;</span>);</span><br><span class="line">lazyImages.<span class="title function_">forEach</span>(<span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">observe</span>(img); <span class="comment">// 开始观察每个图片元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过使用 <code>IntersectionObserver</code> 实现图片懒加载，可以显著提升页面加载性能，尤其在包含大量图片的页面中效果更为明显。</p><h2 id="3-2-无限滚动加载"><a href="#3-2-无限滚动加载" class="headerlink" title="3.2 无限滚动加载"></a>3.2 无限滚动加载</h2><p>无限滚动加载是 <code>IntersectionObserver</code> 另一个常见的应用场景，特别适用于需要展示大量数据的页面，如社交媒体流、新闻列表等。<br> 传统的无限滚动加载通常基于滚动事件来触发数据加载，但这种方式在性能和用户体验上存在一些问题。而使用 <code>IntersectionObserver</code> 可以更高效地实现无限滚动加载。<br> 实现无限滚动加载的步骤如下：</p><ol><li>创建 <code>IntersectionObserver</code> 实例，并指定观察的目标元素，通常是页面底部的加载指示器或占位符元素。</li><li>在回调函数中，判断目标元素是否进入视窗。</li><li>若目标元素进入视窗，触发数据加载的操作，并更新页面内容。</li></ol><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="title function_">loadMoreData</span>(); <span class="comment">// 触发数据加载操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loader = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.loader&#x27;</span>);</span><br><span class="line">observer.<span class="title function_">observe</span>(loader); <span class="comment">// 开始观察加载指示器元素</span></span><br></pre></td></tr></table></figure><p>通过使用 <code>IntersectionObserver</code> 实现无限滚动加载，可以提供更平滑和快速的加载体验。它避免了频繁的滚动事件触发，只在需要加载更多数据时才进行相应操作，减少了无效的请求和资源消耗。</p><p>vue 组件代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;load-more-sentinel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-show</span>=<span class="string">&quot;sentinelEnabled&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">ref</span>=<span class="string">&quot;loadMoreSentinel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;showLoading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;load-more&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;i in 5&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;`--order:$&#123;i&#125;`&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;`circle$&#123;i&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">&#x27;lodash/debounce&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;load-more&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">sentinelEnabled</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">showLoading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">sentinelEnabled</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 因为浏览器渲染机制会在微任务执行之后执行渲染线程，之后执行宏任务，所以 setTimeout 可以保证dom已经更新</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">observer</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">loadMoreSentinel</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">loadMoreSentinel</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (node) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> options = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">threshold</span>: [<span class="number">0</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">observer</span> = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">debounce</span>(<span class="variable language_">this</span>.<span class="property">insideViewportCb</span>, <span class="number">50</span>),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                options</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">observer</span>.<span class="title function_">observe</span>(node);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;, <span class="number">20</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">observer</span> = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">observer</span>) <span class="variable language_">this</span>.<span class="property">observer</span>.<span class="title function_">disconnect</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) = <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">insideViewportCb</span>(<span class="params">[entry]</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sentinelEnabled</span> &amp;&amp; entry &amp;&amp; entry.<span class="property">isIntersecting</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">showLoading</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;load-more&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">finish</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">showLoading</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.load-more-sentinel</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.load-more</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-tag">span</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: inline-block;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">8px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">8px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">background</span>: $Gray8_a080;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">animation</span>: load <span class="number">1.04s</span> ease infinite;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">animation-delay</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--order) * <span class="number">0.13s</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &amp;<span class="selector-pseudo">:last-child</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">margin-right</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="keyword">@keyframes</span> load &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">from</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.3</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">to</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">opacity</span>: <span class="number">0.2</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.3</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="3-3-广告展示控制"><a href="#3-3-广告展示控制" class="headerlink" title="3.3 广告展示控制"></a>3.3 广告展示控制</h2><p><code>IntersectionObserver</code> 在广告展示控制方面也有应用。传统的做法是通过滚动事件或定时器来检测广告元素是否在视窗中，并根据条件来显示或隐藏广告。<br> 使用 <code>IntersectionObserver</code> 可以更精确地控制广告的展示。通过观察广告元素与视窗的交叉状态，可以实现以下功能：</p><ol><li>延迟加载广告：只有当广告元素进入视窗时才开始加载广告内容，从而减少不必要的请求和资源消耗。</li><li>动态展示广告：可以根据广告元素与视窗的交叉比例来决定广告的展示方式。例如，可以在广告元素完全进入视窗后才显示广告，或者在广告元素的一部分进入视窗时展示部分广告内容。</li><li>预加载广告：可以在广告元素进入视窗之前提前加载广告内容，以减少展示广告的延迟时间。</li></ol><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="title function_">showAd</span>(entry.<span class="property">target</span>); <span class="comment">// 显示广告</span></span><br><span class="line">      observer.<span class="title function_">unobserve</span>(entry.<span class="property">target</span>); <span class="comment">// 停止观察该广告元素</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">hideAd</span>(entry.<span class="property">target</span>); <span class="comment">// 隐藏广告</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ads = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.ad&#x27;</span>);</span><br><span class="line">ads.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ad</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">observe</span>(ad); <span class="comment">// 开始观察每个广告元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过使用 <code>IntersectionObserver</code> 来控制广告的展示，可以提高广告的可视性和用户体验。只有在广告元素真正进入视窗时才展示广告，避免了不必要的展示和资源浪费。</p><h2 id="3-4-有效曝光埋点"><a href="#3-4-有效曝光埋点" class="headerlink" title="3.4 有效曝光埋点"></a>3.4 有效曝光埋点</h2><p>有效曝光埋点是 <code>IntersectionObserver</code> 的另一个重要应用场景。在网页或应用中，我们常常需要追踪用户对某些元素的曝光情况，以便进行数据分析、广告计费和用户行为研究等，但如何识别曝光为<strong>有效</strong>的，也就是真实的出现在视口范围内，是一个难点。<br> <code>IntersectionObserver</code> 提供了一个可靠且高效的方式来实现有效曝光埋点。通过观察目标元素与视窗的交叉状态，可以确定元素是否在视窗中完全或部分可见，从而进行曝光统计。</p><p>实现有效曝光埋点的步骤如下：</p><ol><li>创建 <code>IntersectionObserver</code> 实例，并指定观察的目标元素。</li><li>在回调函数中，根据目标元素的交叉状态判断是否曝光。</li><li>根据业务需求，记录曝光数据或触发相应的操作。</li></ol><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="title function_">trackExposure</span>(entry.<span class="property">target</span>); <span class="comment">// 记录曝光数据或触发相应操作</span></span><br><span class="line">      observer.<span class="title function_">unobserve</span>(entry.<span class="property">target</span>); <span class="comment">// 停止观察该目标元素</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.exposure-element&#x27;</span>);</span><br><span class="line">elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">observe</span>(element); <span class="comment">// 开始观察每个目标元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过使用 <code>IntersectionObserver</code> 进行有效曝光埋点，可以准确地追踪用户对指定元素的曝光情况，而无需依赖滚动事件或定时器。这样可以提供更准确的数据分析和用户行为洞察。</p><h2 id="3-5-用户兴趣埋点"><a href="#3-5-用户兴趣埋点" class="headerlink" title="3.5 用户兴趣埋点"></a>3.5 用户兴趣埋点</h2><p>用户兴趣埋点是一个类似有效曝光埋点的功能。通过观察用户与特定元素的交叉状态，可以获取用户对该元素的兴趣程度，从而进行个性化推荐、内容优化和用户行为分析等。 注意：兴趣埋点规则是一种定义用户对特定元素兴趣的规则。在本文中，规则是当某元素在视口停留时间达到2秒以上时，被认为用户对该元素感兴趣。 实现该规则的步骤如下：</p><ol><li>创建 <code>IntersectionObserver</code> 实例，并指定观察的目标元素。</li><li>在回调函数中，根据目标元素的交叉状态判断用户对该元素的兴趣。</li><li>根据规则判断适口停留时间是否满足条件。</li><li>如果满足条件，则记录兴趣数据或触发相应操作。 示例代码如下：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span> &amp;&amp;</span><br><span class="line">        entry.<span class="property">intersectionRatio</span> &gt;= <span class="number">0.5</span> &amp;&amp;</span><br><span class="line">        entry.<span class="property">intersectionRect</span>.<span class="property">width</span> &gt;= entry.<span class="property">boundingClientRect</span>.<span class="property">width</span> * <span class="number">0.5</span> &amp;&amp;</span><br><span class="line">        entry.<span class="property">intersectionRect</span>.<span class="property">height</span> &gt;= entry.<span class="property">boundingClientRect</span>.<span class="property">height</span> * <span class="number">0.5</span> &amp;&amp;</span><br><span class="line">        entry.<span class="property">time</span> &gt;= <span class="number">2000</span></span><br><span class="line">      ) &#123;</span><br><span class="line">      <span class="title function_">trackInterest</span>(entry.<span class="property">target</span>); <span class="comment">// 记录兴趣数据或触发相应操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.interest-element&#x27;</span>);</span><br><span class="line">elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">observe</span>(element); <span class="comment">// 开始观察每个目标元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上述示例中，除了判断目标元素是否交叉以外，还添加了其他条件来确保兴趣的准确性。例如，使用 <code>intersectionRatio</code> 判断元素的可见比例是否超过一定阈值，使用 <code>intersectionRect</code> 和 <code>boundingClientRect</code> 比较元素的交叉区域与元素自身的尺寸，确保元素的大部分内容都在视口中可见。<br> 通过将适口停留时间（<code>entry.time</code>）与2秒进行比较，可以判断用户对元素的兴趣是否达到规定的时间阈值。</p><p>充分利用 <code>IntersectionObserver</code>，开发者可以更好地了解用户的需求和行为，提供更有针对性的用户体验和增值服务。用户兴趣埋点为产品优化和业务决策提供了重要的数据，可以更精确地了解用户的兴趣和行为模式，从而提供更个性化和有价值的用户体验。</p><blockquote><p>ps: 具体的兴趣埋点规则可能因业务需求而异，以上示例仅提供了一种可能的实现方式。在实际应用中，可以根据业务需求和用户行为模式进行相应调整和定制化。</p></blockquote><h2 id="3-6-可视区域内外动画-x2F-视频暂停（腾讯视频-app-列表效果）"><a href="#3-6-可视区域内外动画-x2F-视频暂停（腾讯视频-app-列表效果）" class="headerlink" title="3.6 可视区域内外动画&#x2F;视频暂停（腾讯视频 app 列表效果）"></a>3.6 可视区域内外动画&#x2F;视频暂停（腾讯视频 app 列表效果）</h2><p>可视区域内外视频暂停也可以用 <code>IntersectionObserver</code> 实现。通过观察视频元素与视窗的交叉状态，可以控制视频的播放和暂停，以提升用户体验和优化资源消耗。</p><p>具体应用场景包括：</p><ol><li>自动播放与暂停：当视频元素完全进入视窗时，自动播放视频；当视频元素完全离开视窗时，暂停视频的播放。这样可以确保只有在用户可见的范围内才播放视频，避免不必要的资源浪费和带宽消耗。</li><li>音频控制：当视频元素进入视窗时，开始播放视频的音频；当视频元素完全离开视窗时，暂停视频的音频。这样可以确保只有在用户可见的范围内才播放视频的声音，避免用户同时播放多个视频的声音干扰。</li><li>视频列表优化：当网页中包含多个视频列表时，只有在用户滚动或浏览到特定视频时才播放该视频，其他视频则保持暂停状态。这样可以减少同时加载和播放多个视频对带宽和性能的压力，提升页面加载速度和用户体验。</li><li>节省用户流量：当用户在移动设备上浏览网页时，可以通过 <code>IntersectionObserver</code> 监测视频元素与视窗的交叉状态，仅当视频元素进入视窗时才加载和播放视频。这样可以避免不必要的流量消耗，节省用户的数据流量。</li></ol><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> video = entry.<span class="property">target</span>;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      video.<span class="title function_">play</span>(); <span class="comment">// 播放视频</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      video.<span class="title function_">pause</span>(); <span class="comment">// 暂停视频</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> videos = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">videos.<span class="title function_">forEach</span>(<span class="function">(<span class="params">video</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">observe</span>(video); <span class="comment">// 开始观察每个视频元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过使用 <code>IntersectionObserver</code> 控制视频的播放和暂停，可以优化用户体验、减少资源消耗，提升页面性能和加载速度。</p><blockquote><p>具体的应用场景和交互方式可能因实际需求而异。开发者可以根据自己的业务需求和用户体验目标，合理运用 <code>IntersectionObserver</code> 来实现可视区域内外视频的暂停和播放控制。</p></blockquote><h2 id="3-7-视差效果与动画"><a href="#3-7-视差效果与动画" class="headerlink" title="3.7 视差效果与动画"></a>3.7 视差效果与动画</h2><p>视差效果与动画也可以通过 <code>IntersectionObserver</code> 实现精准的控制。通过观察元素与视窗的交叉状态，可以触发或控制视差效果和动画，为网页或应用添加更丰富的交互和视觉效果。</p><p>以下是视差效果和动画的一些具体应用场景：</p><ol><li>滚动视差效果：当网页中的元素与视窗交叉时，根据滚动的位置和速度，以不同的速率和方向来移动元素，创造出立体感和深度感。例如，背景图片或图层随滚动动态移动，给用户带来视觉上的差异感和沉浸感。</li><li>动态加载和过渡效果：当元素进入视窗时，根据预定义的动画效果或过渡效果，使元素以流畅和吸引人的方式进入页面。例如，图片或文本逐渐渐显现，元素从一种状态平滑过渡到另一种状态，为用户提供更优雅的页面加载和内容展示。</li><li>触发动画效果：当特定元素进入视窗时，通过 <code>IntersectionObserver</code> 触发相应的动画效果，增加用户与页面的互动性。例如，当用户滚动到某个区域时，元素以动画形式弹出、旋转、渐变等，吸引用户的注意力和参与度。</li><li>动态内容加载：当用户滚动到页面底部或特定区域时，通过 <code>IntersectionObserver</code> 触发动态加载更多的内容。这种技术常用于实现无限滚动列表或延迟加载，提供流畅的用户体验，避免一次性加载大量内容带来的性能问题。</li><li>页面交互控制：通过观察元素与视窗的交叉状态，根据需要触发特定的交互控制。例如，当特定元素完全进入视窗时，启用按钮、链接或其他交互元素；当元素完全离开视窗时，禁用或隐藏相关元素。</li></ol><h2 id="3-8-标题和导航联动"><a href="#3-8-标题和导航联动" class="headerlink" title="3.8 标题和导航联动"></a>3.8 标题和导航联动</h2><p>标题和导航联动是 <code>IntersectionObserver</code> 的一种常见应用场景，通过观察元素与视窗的交叉状态，实现标题与导航之间的联动效果，提升用户导航的便利性和可视性。<br> 此场景<strong>张鑫旭</strong>大佬已经有一篇非常详细的文章，这里不做过多介绍，请<a href="https://link.juejin.cn/?target=https://www.zhangxinxu.com/wordpress/2020/12/js-intersectionobserver-nav/">移步</a></p><h2 id="3-9-虚拟列表优化"><a href="#3-9-虚拟列表优化" class="headerlink" title="3.9 虚拟列表优化"></a>3.9 虚拟列表优化</h2><p>虚拟列表中的滚动是一个重要的性能考量因素。传统的滚动监听需要在滚动事件中实时计算列表项的位置，并判断其可见性。而使用 <code>IntersectionObserver</code>，可以将交叉状态的监测交给浏览器进行异步处理，避免了频繁的计算操作，从而提高了滚动的流畅性和性能。</p><h2 id="3-10-消息已读状态标记"><a href="#3-10-消息已读状态标记" class="headerlink" title="3.10 消息已读状态标记"></a>3.10 消息已读状态标记</h2><p>在消息已读状态场景中，<code>IntersectionObserver</code> 可以被用于实现即时的状态追踪。<br> 通常，当用户滚动浏览消息列表时，我们需要确定哪些消息已经出现在可视区域内，以便标记它们为已读状态。<br> 通过使用<code>IntersectionObserver</code>，我们可以监测消息列表中每个消息元素与可视区域的交叉情况。一旦某个消息元素进入可视区域，我们可以触发一个回调函数来处理相应的逻辑，例如将该消息标记为已读。</p><p>以下是一个简单的示例，演示了<code>IntersectionObserver</code>在消息已读状态场景中的应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 IntersectionObserver 实例</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="comment">// 当消息元素进入可视区域时，将其标记为已读</span></span><br><span class="line">      <span class="title function_">markMessageAsRead</span>(entry.<span class="property">target</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有消息元素</span></span><br><span class="line"><span class="keyword">const</span> messageElements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.message&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监测每个消息元素与可视区域的交叉情况</span></span><br><span class="line">messageElements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">messageElement</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">observe</span>(messageElement);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记消息为已读的逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">markMessageAsRead</span>(<span class="params">messageElement</span>) &#123;</span><br><span class="line">  <span class="comment">// 将消息标记为已读状态，例如改变消息的样式或发送已读状态的请求</span></span><br><span class="line">  messageElement.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;read&#x27;</span>);</span><br><span class="line">  <span class="comment">// 其他处理逻辑...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们创建了一个<code>IntersectionObserver</code>实例，并为其指定了一个回调函数。当消息元素进入可视区域时，该回调函数会被触发。然后，我们可以在回调函数中执行将消息标记为已读的逻辑。</p><p>通过将消息元素与<code>IntersectionObserver</code>进行关联，我们可以动态地监测它们与可视区域的交叉情况，无需依赖用户的滚动行为或其他事件来触发状态的更新。这种方式可以提供更即时、精确的消息已读状态更新，增强用户体验。</p><h1 id="四、最佳实践"><a href="#四、最佳实践" class="headerlink" title="四、最佳实践"></a>四、最佳实践</h1><ol><li><p><strong>选择合适的根元素</strong><br> 根据你的需求，选择合适的根元素进行监听。根元素可以是整个文档或特定的容器元素。确保选择的根元素能够包含你要监听的目标元素。</p></li><li><p><strong>优化阈值设置</strong><br> 设置合适的交叉比例阈值可以减少不必要的回调函数触发。过多的阈值设置可能会导致频繁的回调函数执行，因此需要根据具体情况进行优化。</p></li><li><p><strong>避免频繁的回调函数执行</strong><br> 由于 <code>IntersectionObserver</code> 可能在短时间内多次触发回调函数，为了避免频繁的操作或网络请求，可以使用节流（<code>throttling</code>）或防抖（<code>debouncing</code>）技术进行处理。节流可以限制回调函数的执行频率，而防抖可以在指定时间内的连续触发中只执行最后一次。</p></li><li><p><strong>优化性能与资源消耗</strong><br> 尽管 <code>IntersectionObserver</code> 可以提供更好的性能，但当处理大量元素或复杂布局时，仍需考虑性能和资源消耗。可以结合使用时间间隔、限制最大触发次数等策略，确保在合理的范围内处理交叉状态变化。</p></li><li><p><strong>控制监听范围</strong><br> 仅监听真正需要监测的元素，避免不必要的监听。过多的监听会增加性能消耗，并可能导致不必要的回调函数触发。</p></li><li><p><strong>谨慎使用多个 <code>IntersectionObserver</code></strong><br> 当需要监测多个元素时，使用多个 <code>IntersectionObserver</code> 可能会增加代码复杂性和性能开销。在这种情况下，可以考虑合并监听逻辑，减少 <code>IntersectionObserver</code> 的数量。</p></li><li><p><strong>处理边界情况</strong><br> 注意处理边界情况，如元素尺寸变化、容器滚动等。在这些情况下，<code>IntersectionObserver</code> 可能无法及时检测到交叉状态的变化，需要进行额外的处理。</p></li><li><p><strong>考虑兼容性</strong><br> 尽管大多数现代浏览器都支持 <code>IntersectionObserver</code>，但在一些旧版本浏览器中可能不被支持。为了确保兼容性，可以使用 <code>IntersectionObserver</code> 的 <code>polyfill</code> 或提供降级方案。</p></li><li><p><strong>处理 <code>IntersectionObserver</code> 回调中的异步操作</strong></p><p>9.1 取消异步操作：在某些情况下，当元素离开视窗或不再需要异步操作时，可能需要取消正在进行的异步操作。例如，当用户迅速滚动页面时，可能需要取消之前触发的异步操作，以避免不必要的网络请求或计算。可以使用适当的方法，如取消 <code>Promise</code> 或中断正在进行的异步任务。</p><p>9.2 性能优化：对于耗时的异步操作，需要注意性能优化。考虑使用并发执行、缓存结果或其他优化策略，以减少延迟和资源消耗。</p></li><li><p><strong>清理资源</strong><br> 当不再需要 <code>IntersectionObserver</code> 监听或元素被销毁时，确保正确地清理和释放相关的资源。取消监听、解除绑定和清理回调函数，以避免内存泄漏和不必要的资源占用</p></li></ol><h1 id="五、React-Hooks-之-useIntersection"><a href="#五、React-Hooks-之-useIntersection" class="headerlink" title="五、React Hooks 之 useIntersection"></a>五、React Hooks 之 useIntersection</h1><p>React 传感器钩子跟踪目标元素与祖先元素或顶级文档视口的交集变化。使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a>并返回<a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry">IntersectionObserverEntry</a>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useIntersection &#125; <span class="keyword">from</span> <span class="string">&#x27;react-use&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Demo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> intersectionRef = <span class="title class_">React</span>.<span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> intersection = <span class="title function_">useIntersection</span>(intersectionRef, &#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">rootMargin</span>: <span class="string">&#x27;0px&#x27;</span>,</span><br><span class="line">    <span class="attr">threshold</span>: <span class="number">1</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;intersectionRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;intersection &amp;&amp; intersection.intersectionRatio &lt; 1</span></span><br><span class="line"><span class="language-xml">        ? &#x27;Obscured&#x27;</span></span><br><span class="line"><span class="language-xml">        : &#x27;Fully in view&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
